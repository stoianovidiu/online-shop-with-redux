{"version":3,"sources":["components/ConfirmMessage/ActionDoneMessage/ActionDoneMessage.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","Utility/Utility.js","components/ConfirmMessage/ActionDoneMessage/ActionDoneMessage.module.css","containers/AddProduct/AddProduct.js","containers/AddProduct/AddProduct.module.css"],"names":["actionDoneMessage","props","className","classes","ActionDoneMessage","message","clicked","input","inputClasses","InputElement","invalid","shouldValidate","touched","push","Invalid","Input","Label","label","join","type","placeholder","value","onChange","changed","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","isNumeric","test","withErrorHandler","useState","id","name","category","price","image","description","productToAdd","setProductToAdd","validation","valid","priceRules","setPriceRules","isFormValid","setIsFormValid","isLoading","setIsLoading","isDone","setIsDone","cancelMessage","setIsAdding","setWasAdded","checkForm","useCallback","addProd","Object","values","some","field","useEffect","fieldElementsArray","key","element","data","form","map","el","charAt","toUpperCase","slice","event","userInput","target","updatedFields","editInputHandler","productToAddWithId","products","axios","post","then","resp","status","catch","err","disabled","AddProduct","show","modalClosed"],"mappings":"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","file":"static/js/6.a25bec49.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./ActionDoneMessage.module.css\";\r\n\r\nconst actionDoneMessage = (props) => {\r\n  return (\r\n    <div className={classes.ActionDoneMessage}>\r\n      <p>{props.message}</p>\r\n      <Button clicked={props.clicked}>OK</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default actionDoneMessage;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  const inputClasses = [classes.InputElement];\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      <input\r\n        className={inputClasses.join(\" \")}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        value={props.value}\r\n        onChange={props.changed}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pn_El\",\"Label\":\"Input_Label__3vOCB\",\"InputElement\":\"Input_InputElement__3XM0f\",\"Invalid\":\"Input_Invalid__3yo0_\"};","export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (!rules) return true;\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActionDoneMessage\":\"ActionDoneMessage_ActionDoneMessage__3ysrl\"};","import React, { Fragment, useCallback, useEffect, useState } from \"react\";\r\n\r\nimport classes from \"./AddProduct.module.css\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport ActionDoneMessage from \"../../components/ConfirmMessage/ActionDoneMessage/ActionDoneMessage\";\r\nimport axios from \"../../axios-instance\";\r\nimport { checkValidity } from \"../../Utility/Utility\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\n\r\nconst AddProduct = (props) => {\r\n  const [productToAdd, setProductToAdd] = useState({\r\n    id: +\"\",\r\n    name: \"\",\r\n    category: \"\",\r\n    price: \"\",\r\n    image: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const [priceRules, setPriceRules] = useState({\r\n    validation: {\r\n      required: true,\r\n      isNumeric: true,\r\n    },\r\n    valid: false,\r\n    touched: false,\r\n  });\r\n\r\n  const [isFormValid, setIsFormValid] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isDone, setIsDone] = useState(false);\r\n\r\n  const cancelButtonHandler = () => {\r\n    props.setWasAdded(false);\r\n    props.setIsAdding(false);\r\n  };\r\n\r\n  const cancelMessage = () => {\r\n    setIsDone(false);\r\n    props.setIsAdding(false);\r\n    props.setWasAdded(true);\r\n  };\r\n\r\n  const actionDoneMessage = (\r\n    <ActionDoneMessage\r\n      message=\"Product was added to the list!\"\r\n      clicked={cancelMessage}\r\n    />\r\n  );\r\n\r\n  const addButtonHandler = () => {\r\n    setIsLoading(true);\r\n    const productToAddWithId = {\r\n      ...productToAdd,\r\n      id: props.products[props.products.length - 1].id + 1,\r\n    };\r\n\r\n    axios\r\n      .post(\"/products\", productToAddWithId)\r\n      .then((resp) => {\r\n        if (resp.status >= 200 && resp.status < 300) {\r\n          setIsLoading(false);\r\n          setIsDone(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const editInputHandler = (event, field) => {\r\n    let userInput = event.target.value;\r\n    if (field === \"price\") {\r\n      const rules = {\r\n        ...priceRules,\r\n        valid: checkValidity(userInput, priceRules.validation),\r\n        touched: true,\r\n      };\r\n      setPriceRules(rules);\r\n    }\r\n    const updatedFields = {\r\n      ...productToAdd,\r\n      [field]: userInput,\r\n    };\r\n\r\n    setProductToAdd(updatedFields);\r\n  };\r\n\r\n  const checkForm = useCallback(() => {\r\n    const addProd = { ...productToAdd };\r\n    const isValid = !Object.values(addProd).some((field) => {\r\n      return field === null || field === \"\";\r\n    });\r\n\r\n    if (isValid) {\r\n      setIsFormValid(true);\r\n    } else {\r\n      setIsFormValid(false);\r\n    }\r\n  }, [productToAdd]);\r\n\r\n  useEffect(() => {\r\n    checkForm();\r\n  }, [checkForm]);\r\n\r\n  const fieldElementsArray = [];\r\n  for (let key in productToAdd) {\r\n    if (key === \"id\") continue;\r\n    fieldElementsArray.push({\r\n      element: key,\r\n      data: productToAdd[key],\r\n    });\r\n  }\r\n\r\n  let form = (\r\n    <Fragment>\r\n      <h2>Add Product</h2>\r\n      {fieldElementsArray.map((el) => {\r\n        return (\r\n          <Input\r\n            key={el.element}\r\n            label={el.element.charAt(0).toUpperCase() + el.element.slice(1)}\r\n            type=\"text\"\r\n            value={el.data}\r\n            invalid={el.element === \"price\" ? !priceRules.valid : false}\r\n            shouldValidate={\r\n              el.element === \"price\" ? priceRules.validation : null\r\n            }\r\n            touched={priceRules.touched}\r\n            changed={(event) => editInputHandler(event, el.element)}\r\n          />\r\n        );\r\n      })}\r\n      <Button clicked={cancelButtonHandler}>CANCEL</Button>\r\n      <Button\r\n        clicked={addButtonHandler}\r\n        disabled={isFormValid && priceRules.valid ? false : true}\r\n      >\r\n        ADD\r\n      </Button>\r\n    </Fragment>\r\n  );\r\n\r\n  if (isLoading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.AddProduct}>\r\n      <Modal show={isDone} modalClosed={cancelMessage}>\r\n        {actionDoneMessage}\r\n      </Modal>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withErrorHandler(AddProduct, axios);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddProduct\":\"AddProduct_AddProduct__2ol78\"};"],"sourceRoot":""}