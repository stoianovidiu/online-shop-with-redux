{"version":3,"sources":["containers/EditProduct/EditProduct.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","Utility/Utility.js","containers/EditProduct/EditProduct.module.css"],"names":["withErrorHandler","props","useState","product","editedProduct","setEditedProduct","validation","required","isNumeric","valid","touched","priceRules","setPriceRules","isFormValid","setIsFormValid","isLoading","setIsLoading","isDone","setIsDone","checkForm","useCallback","edProd","isValid","Object","values","some","field","useEffect","closeMessage","setIsEditing","elementsArray","key","push","element","data","form","name","map","el","type","label","charAt","toUpperCase","slice","value","invalid","shouldValidate","changed","event","userInput","target","rules","checkValidity","updatedFields","editInputHandler","clicked","setWasEdited","axios","put","currProd","then","resp","status","catch","err","disabled","confirmMessage","message","className","classes","EditProduct","show","modalClosed","input","inputClasses","InputElement","Invalid","Input","Label","join","placeholder","onChange","module","exports","trim","minLength","length","test"],"mappings":"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","file":"static/js/10.066d599f.chunk.js","sourcesContent":["import React, { Fragment, useCallback, useEffect, useState } from \"react\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./EditProduct.module.css\";\r\nimport axios from \"../../axios-instance\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport ActionDoneMessage from \"../../components/ConfirmMessage/ActionDoneMessage/ActionDoneMessage\";\r\nimport { checkValidity } from \"../../Utility/Utility\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\n\r\nconst EditProduct = (props) => {\r\n  const [editedProduct, setEditedProduct] = useState(props.product);\r\n  const [priceRules, setPriceRules] = useState({\r\n    validation: {\r\n      required: true,\r\n      isNumeric: true,\r\n    },\r\n    valid: true,\r\n    touched: false,\r\n  });\r\n  const [isFormValid, setIsFormValid] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isDone, setIsDone] = useState(false);\r\n\r\n  const editInputHandler = (event, field) => {\r\n    let userInput = event.target.value;\r\n    if (field === \"price\") {\r\n      const rules = {\r\n        ...priceRules,\r\n        valid: checkValidity(userInput, priceRules.validation),\r\n        touched: true,\r\n      };\r\n      setPriceRules(rules);\r\n    }\r\n\r\n    const updatedFields = {\r\n      ...editedProduct,\r\n      [field]: userInput,\r\n    };\r\n    setEditedProduct(updatedFields);\r\n  };\r\n\r\n  const checkForm = useCallback(() => {\r\n    const edProd = { ...editedProduct };\r\n    const isValid = !Object.values(edProd).some((field) => {\r\n      return field === null || field === \"\";\r\n    });\r\n\r\n    if (isValid) {\r\n      setIsFormValid(true);\r\n    } else {\r\n      setIsFormValid(false);\r\n    }\r\n  }, [editedProduct]);\r\n\r\n  useEffect(() => {\r\n    checkForm();\r\n  }, [checkForm]);\r\n\r\n  const cancelEditHandler = () => {\r\n    props.setIsEditing(false);\r\n    props.setWasEdited(false);\r\n  };\r\n\r\n  const saveEditHandler = () => {\r\n    setIsLoading(true);\r\n    axios\r\n      .put(`/products/${props.currProd}`, editedProduct)\r\n      .then((resp) => {\r\n        if (resp.status >= 200 && resp.status < 300) {\r\n          setIsLoading(false);\r\n          props.setWasEdited(true);\r\n          setIsDone(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const closeMessage = () => {\r\n    setIsDone(false);\r\n    props.setIsEditing(false);\r\n  };\r\n\r\n  const elementsArray = [];\r\n  for (let key in editedProduct) {\r\n    if (key === \"id\") {\r\n      continue;\r\n    }\r\n    elementsArray.push({\r\n      element: key,\r\n      data: editedProduct[key],\r\n    });\r\n  }\r\n\r\n  let form = (\r\n    <Fragment>\r\n      <h2>Edit: {props.product.name}</h2>\r\n      {elementsArray.map((el) => {\r\n        return (\r\n          <Input\r\n            key={el.element}\r\n            type=\"text\"\r\n            label={el.element.charAt(0).toUpperCase() + el.element.slice(1)}\r\n            value={el.data}\r\n            invalid={el.element === \"price\" ? !priceRules.valid : false}\r\n            shouldValidate={\r\n              el.element === \"price\" ? priceRules.validation : null\r\n            }\r\n            touched={priceRules.touched}\r\n            changed={(event) => editInputHandler(event, el.element)}\r\n          />\r\n        );\r\n      })}\r\n      <div>\r\n        <Button clicked={cancelEditHandler}>CANCEL</Button>\r\n        <Button\r\n          clicked={saveEditHandler}\r\n          disabled={isFormValid && priceRules.valid ? false : true}\r\n        >\r\n          SAVE\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n\r\n  const confirmMessage = (\r\n    <ActionDoneMessage\r\n      message={`The product \"${props.product.name}\" was successfully edited.`}\r\n      clicked={closeMessage}\r\n    />\r\n  );\r\n  if (isLoading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.EditProduct}>\r\n      <Modal show={isDone} modalClosed={closeMessage}>\r\n        {confirmMessage}\r\n      </Modal>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withErrorHandler(EditProduct, axios);\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  const inputClasses = [classes.InputElement];\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      <input\r\n        className={inputClasses.join(\" \")}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        value={props.value}\r\n        onChange={props.changed}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pn_El\",\"Label\":\"Input_Label__3vOCB\",\"InputElement\":\"Input_InputElement__3XM0f\",\"Invalid\":\"Input_Invalid__3yo0_\"};","export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (!rules) return true;\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EditProduct\":\"EditProduct_EditProduct__1gU5X\"};"],"sourceRoot":""}